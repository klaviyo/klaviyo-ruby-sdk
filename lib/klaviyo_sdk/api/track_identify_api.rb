=begin
#Klaviyo API

#Empowering creators to own their destiny

The version of the OpenAPI document: 2022.03.29

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Klaviyo
  class TrackIdentifyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Identify Profile (Legacy)
    # This endpoint is also used to identify a profile and update its properties without an associated event. It takes as input the same payload as the above POST request, but as a base64-encoded string passed as a query parameter. NOTE: This is offered for backwards compatibility; we recommend all new implementations use the POST approach above.    **EXAMPLE:**      ```   {       \"token\": \"PUBLIC_KEY\",       \"properties\": {         \"$email\": \"abraham.lincoln@klaviyo.com\",         \"$first_name\": \"Abraham\",         \"$last_name\": \"Lincoln\",         \"$city\": \"Springfield\",         \"$region\": \"Illinois\"       }   }   ```   Gets encoded into the following string, which is passed into the `data` parameter:    `eyJ0b2tlbiI6ICJQVUJMSUNfS0VZIiwicHJvcGVydGllcyI6IHsiJGVtYWlsIjogImFicmFoYW0ubGluY29sbkBrbGF2aXlvLmNvbSIsIiRmaXJzdF9uYW1lIjogIkFicmFoYW0iLCIkbGFzdF9uYW1lIjogIkxpbmNvbG4iLCIkY2l0eSI6ICJTcHJpbmdmaWVsZCIsIiRyZWdpb24iOiAiSWxsaW5vaXMifX0K`     
    # @param data [String] String representation of base64 encoded JSON object
    # @param [Hash] opts the optional parameters
    # @return [String]
    def identify_get(data, opts = {})
      data, _status_code, _headers = identify_get_with_http_info(data, opts)
      data
    end

    # Identify Profile (Legacy)
    # This endpoint is also used to identify a profile and update its properties without an associated event. It takes as input the same payload as the above POST request, but as a base64-encoded string passed as a query parameter. NOTE: This is offered for backwards compatibility; we recommend all new implementations use the POST approach above.    **EXAMPLE:**      &#x60;&#x60;&#x60;   {       \&quot;token\&quot;: \&quot;PUBLIC_KEY\&quot;,       \&quot;properties\&quot;: {         \&quot;$email\&quot;: \&quot;abraham.lincoln@klaviyo.com\&quot;,         \&quot;$first_name\&quot;: \&quot;Abraham\&quot;,         \&quot;$last_name\&quot;: \&quot;Lincoln\&quot;,         \&quot;$city\&quot;: \&quot;Springfield\&quot;,         \&quot;$region\&quot;: \&quot;Illinois\&quot;       }   }   &#x60;&#x60;&#x60;   Gets encoded into the following string, which is passed into the &#x60;data&#x60; parameter:    &#x60;eyJ0b2tlbiI6ICJQVUJMSUNfS0VZIiwicHJvcGVydGllcyI6IHsiJGVtYWlsIjogImFicmFoYW0ubGluY29sbkBrbGF2aXlvLmNvbSIsIiRmaXJzdF9uYW1lIjogIkFicmFoYW0iLCIkbGFzdF9uYW1lIjogIkxpbmNvbG4iLCIkY2l0eSI6ICJTcHJpbmdmaWVsZCIsIiRyZWdpb24iOiAiSWxsaW5vaXMifX0K&#x60;     
    # @param data [String] String representation of base64 encoded JSON object
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def identify_get_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackIdentifyApi.identify_get ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TrackIdentifyApi.identify_get"
      end
      # resource path
      local_var_path = '/identify'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data'] = data

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TrackIdentifyApi.identify_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackIdentifyApi#identify_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Profile
    # This endpoint is used to track and update properties about an individual without tracking an associated event. The following data is stored in a JSON object.     **JSON OBJECT STRUCTURE:**    __token: *string*__   This is your public API key.      __properties: *JSON Object or null*__   Properties of the profile to track/update. You must identify the person by their email using a $email key (or by their phone number using a `$phone_number` key if you have SMS-only contacts). Other than that, you can include any data you want and it can then be used to create segments of people. For example, if you wanted to create a list of people on trial plans, include a person's plan type in this JSON object so you can use that information later.         **SPECIAL FIELDS:**    The Klaviyo CRM has the following special fields you can set for customer **properties** with the **Identify** endpoint, to unlock additional functionality:      **$email:** _string_   **$first_name:** _string_   **$last_name:** _string_   **$phone_number:** _string; eg: \"+13239169023\"_   **$city:** _string_   **$region:** _string; state, or other region_   **$country:** _string_   **$zip:** _string_   **$image:** _string; url to a photo of a person_   **$consent:** _list of strings; eg: ['sms', 'email', 'web', 'directmail', 'mobile']_         **EXAMPLE:**      ```   {       \"token\": \"PUBLIC_KEY\",       \"properties\": {         \"$email\": \"abraham.lincoln@klaviyo.com\",         \"$first_name\": \"Abraham\",         \"$last_name\": \"Lincoln\",         \"$city\": \"Springfield\",         \"$region\": \"Illinois\"       }   }    
    # @param data [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def identify_post(data, opts = {})
      data, _status_code, _headers = identify_post_with_http_info(data, opts)
      data
    end

    # Identify Profile
    # This endpoint is used to track and update properties about an individual without tracking an associated event. The following data is stored in a JSON object.     **JSON OBJECT STRUCTURE:**    __token: *string*__   This is your public API key.      __properties: *JSON Object or null*__   Properties of the profile to track/update. You must identify the person by their email using a $email key (or by their phone number using a &#x60;$phone_number&#x60; key if you have SMS-only contacts). Other than that, you can include any data you want and it can then be used to create segments of people. For example, if you wanted to create a list of people on trial plans, include a person&#39;s plan type in this JSON object so you can use that information later.         **SPECIAL FIELDS:**    The Klaviyo CRM has the following special fields you can set for customer **properties** with the **Identify** endpoint, to unlock additional functionality:      **$email:** _string_   **$first_name:** _string_   **$last_name:** _string_   **$phone_number:** _string; eg: \&quot;+13239169023\&quot;_   **$city:** _string_   **$region:** _string; state, or other region_   **$country:** _string_   **$zip:** _string_   **$image:** _string; url to a photo of a person_   **$consent:** _list of strings; eg: [&#39;sms&#39;, &#39;email&#39;, &#39;web&#39;, &#39;directmail&#39;, &#39;mobile&#39;]_         **EXAMPLE:**      &#x60;&#x60;&#x60;   {       \&quot;token\&quot;: \&quot;PUBLIC_KEY\&quot;,       \&quot;properties\&quot;: {         \&quot;$email\&quot;: \&quot;abraham.lincoln@klaviyo.com\&quot;,         \&quot;$first_name\&quot;: \&quot;Abraham\&quot;,         \&quot;$last_name\&quot;: \&quot;Lincoln\&quot;,         \&quot;$city\&quot;: \&quot;Springfield\&quot;,         \&quot;$region\&quot;: \&quot;Illinois\&quot;       }   }    
    # @param data [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def identify_post_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackIdentifyApi.identify_post ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TrackIdentifyApi.identify_post"
      end
      # resource path
      local_var_path = '/identify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['data'] = data

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TrackIdentifyApi.identify_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackIdentifyApi#identify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Track Profile Activity (Legacy)
    # This endpoint is also used to track a profile's activity. It takes as input the same payload as the above POST request, but as a base64-encoded string passed as a query parameter. NOTE: This is offered for backwards compatibility; we recommend all new implementations use the POST approach above.      **EXAMPLE:**      ```   {     \"token\": \"PUBLIC_KEY\",     \"event\": \"Ordered Product\",     \"customer_properties\": {       \"$email\": \"abraham.lincoln@klaviyo.com\"     },     \"properties\": {       \"item_name\": \"Boots\",       \"$value\": 100     }   }    ```   Gets encoded into the following string, which is passed into the `data` parameter:    `eyJ0b2tlbiI6ICJQVUJMSUNfS0VZIiwiZXZlbnQiOiAiT3JkZXJlZEl0ZW0iLCJjdXN0b21lcl9wcm9wZXJ0aWVzIjogeyIkZW1haWwiOiAiYWJyYWhhbS5saW5jb2xuQGtsYXZpeW8uY29tIn0sInByb3BlcnRpZXMiOiB7Iml0ZW1fbmFtZSI6ICJCb290cyIsIiR2YWx1ZSI6IDEwMH19` 
    # @param data [String] String representation of base64 encoded JSON object
    # @param [Hash] opts the optional parameters
    # @return [String]
    def track_get(data, opts = {})
      data, _status_code, _headers = track_get_with_http_info(data, opts)
      data
    end

    # Track Profile Activity (Legacy)
    # This endpoint is also used to track a profile&#39;s activity. It takes as input the same payload as the above POST request, but as a base64-encoded string passed as a query parameter. NOTE: This is offered for backwards compatibility; we recommend all new implementations use the POST approach above.      **EXAMPLE:**      &#x60;&#x60;&#x60;   {     \&quot;token\&quot;: \&quot;PUBLIC_KEY\&quot;,     \&quot;event\&quot;: \&quot;Ordered Product\&quot;,     \&quot;customer_properties\&quot;: {       \&quot;$email\&quot;: \&quot;abraham.lincoln@klaviyo.com\&quot;     },     \&quot;properties\&quot;: {       \&quot;item_name\&quot;: \&quot;Boots\&quot;,       \&quot;$value\&quot;: 100     }   }    &#x60;&#x60;&#x60;   Gets encoded into the following string, which is passed into the &#x60;data&#x60; parameter:    &#x60;eyJ0b2tlbiI6ICJQVUJMSUNfS0VZIiwiZXZlbnQiOiAiT3JkZXJlZEl0ZW0iLCJjdXN0b21lcl9wcm9wZXJ0aWVzIjogeyIkZW1haWwiOiAiYWJyYWhhbS5saW5jb2xuQGtsYXZpeW8uY29tIn0sInByb3BlcnRpZXMiOiB7Iml0ZW1fbmFtZSI6ICJCb290cyIsIiR2YWx1ZSI6IDEwMH19&#x60; 
    # @param data [String] String representation of base64 encoded JSON object
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def track_get_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackIdentifyApi.track_get ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TrackIdentifyApi.track_get"
      end
      # resource path
      local_var_path = '/track'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'data'] = data

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TrackIdentifyApi.track_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackIdentifyApi#track_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Track Profile Activity
    # This endpoint is used to track a profile's activity. The following data is encoded in a JSON object. NOTE: an account can have up to 200 unique metrics (event types). This endpoint can accept payloads up to approximately 1MB.     **JSON OBJECT STRUCTURE:**    __token: *string*__   This is your public API key.      __event: *string*__   Name of the event you want to track.       __customer_properties: *JSON Object or null*__   Properties of the profile that triggered this event. You must identify the person by their email using a $email key (or by their phone number using a `$phone_number` key if you have SMS-only contacts). Other than that, you can include any data you want and it can then be used to create segments of people. For example, if you wanted to create a list of people on trial plans, include a person's plan type in this JSON object so you can use that information later.      __properties: *optional; JSON Object or null*__   Properties of this event. Any properties included here can be used for creating segments later For example, if you track an event called \"Ordered Product\" you could include a property for item type (e.g. image, article, etc.), size, etc.    __time: *optional; 10-digit UNIX timestamp or null*__   When this event occurred. By default, Klaviyo assumes events happen when a request is made. If you'd like to track an event that happened in past, use this property.         **SPECIAL FIELDS:**      The Klaviyo CRM has the following special fields you can set for **customer_properties** with the **Track** endpoint, to unlock additional functionality:      **$email:** _string_   **$first_name:** _string_   **$last_name:** _string_   **$phone_number:** _string; eg: \"+13239169023\"_   **$city:** _string_   **$region:** _string; state, or other region_   **$country:** _string_   **$zip:** _string_   **$image:** _string; url to a photo of a person_   **$consent:** _list of strings; eg: ['sms', 'email', 'web', 'directmail', 'mobile']_      You can also set the following special fields in event **properties** with the **Track** endpoint:      **$event_id:** _a unique identifier for an event_   **$value:** _a numeric value to associate with this event (e.g. the dollar value of a purchase)_      **EXAMPLE:**      ```   {     \"token\": \"PUBLIC_KEY\",     \"event\": \"Ordered Product\",     \"customer_properties\": {       \"$email\": \"abraham.lincoln@klaviyo.com\"     },     \"properties\": {       \"item_name\": \"Boots\",       \"$value\": 100     }   } 
    # @param data [String] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def track_post(data, opts = {})
      data, _status_code, _headers = track_post_with_http_info(data, opts)
      data
    end

    # Track Profile Activity
    # This endpoint is used to track a profile&#39;s activity. The following data is encoded in a JSON object. NOTE: an account can have up to 200 unique metrics (event types). This endpoint can accept payloads up to approximately 1MB.     **JSON OBJECT STRUCTURE:**    __token: *string*__   This is your public API key.      __event: *string*__   Name of the event you want to track.       __customer_properties: *JSON Object or null*__   Properties of the profile that triggered this event. You must identify the person by their email using a $email key (or by their phone number using a &#x60;$phone_number&#x60; key if you have SMS-only contacts). Other than that, you can include any data you want and it can then be used to create segments of people. For example, if you wanted to create a list of people on trial plans, include a person&#39;s plan type in this JSON object so you can use that information later.      __properties: *optional; JSON Object or null*__   Properties of this event. Any properties included here can be used for creating segments later For example, if you track an event called \&quot;Ordered Product\&quot; you could include a property for item type (e.g. image, article, etc.), size, etc.    __time: *optional; 10-digit UNIX timestamp or null*__   When this event occurred. By default, Klaviyo assumes events happen when a request is made. If you&#39;d like to track an event that happened in past, use this property.         **SPECIAL FIELDS:**      The Klaviyo CRM has the following special fields you can set for **customer_properties** with the **Track** endpoint, to unlock additional functionality:      **$email:** _string_   **$first_name:** _string_   **$last_name:** _string_   **$phone_number:** _string; eg: \&quot;+13239169023\&quot;_   **$city:** _string_   **$region:** _string; state, or other region_   **$country:** _string_   **$zip:** _string_   **$image:** _string; url to a photo of a person_   **$consent:** _list of strings; eg: [&#39;sms&#39;, &#39;email&#39;, &#39;web&#39;, &#39;directmail&#39;, &#39;mobile&#39;]_      You can also set the following special fields in event **properties** with the **Track** endpoint:      **$event_id:** _a unique identifier for an event_   **$value:** _a numeric value to associate with this event (e.g. the dollar value of a purchase)_      **EXAMPLE:**      &#x60;&#x60;&#x60;   {     \&quot;token\&quot;: \&quot;PUBLIC_KEY\&quot;,     \&quot;event\&quot;: \&quot;Ordered Product\&quot;,     \&quot;customer_properties\&quot;: {       \&quot;$email\&quot;: \&quot;abraham.lincoln@klaviyo.com\&quot;     },     \&quot;properties\&quot;: {       \&quot;item_name\&quot;: \&quot;Boots\&quot;,       \&quot;$value\&quot;: 100     }   } 
    # @param data [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def track_post_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrackIdentifyApi.track_post ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling TrackIdentifyApi.track_post"
      end
      # resource path
      local_var_path = '/track'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['data'] = data

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TrackIdentifyApi.track_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackIdentifyApi#track_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
