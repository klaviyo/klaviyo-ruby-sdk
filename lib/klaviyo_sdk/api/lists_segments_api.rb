=begin
#Klaviyo API

#Empowering creators to own their destiny

The version of the OpenAPI document: 2022.03.29

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Klaviyo
  class ListsSegmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Members to a List
    # Adds profiles to a list. This endpoint is functionally equivalent to adding profiles to a list via a CSV upload and will immediately add profiles to the list. If you would like to subscribe profiles to a list and use the double opt-in settings for the list, please use the subscribe endpoint.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject4] :inline_object4 
    # @return [Array<Hash<String, Object>>]
    def add_members(list_id, opts = {})
      data, _status_code, _headers = add_members_with_http_info(list_id, opts)
      data
    end

    # Add Members to a List
    # Adds profiles to a list. This endpoint is functionally equivalent to adding profiles to a list via a CSV upload and will immediately add profiles to the list. If you would like to subscribe profiles to a list and use the double opt-in settings for the list, please use the subscribe endpoint.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject4] :inline_object4 
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def add_members_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.add_members ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.add_members"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/members'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object4'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hash<String, Object>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.add_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#add_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create List
    # Creates a new list.
    # @param list_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def create_list(list_name, opts = {})
      data, _status_code, _headers = create_list_with_http_info(list_name, opts)
      data
    end

    # Create List
    # Creates a new list.
    # @param list_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def create_list_with_http_info(list_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.create_list ...'
      end
      # verify the required parameter 'list_name' is set
      if @api_client.config.client_side_validation && list_name.nil?
        fail ArgumentError, "Missing the required parameter 'list_name' when calling ListsSegmentsApi.create_list"
      end
      # resource path
      local_var_path = '/v2/lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['list_name'] = list_name

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.create_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#create_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete List
    # Deletes a list from an account. This is a destructive operation and cannot be undone. It will also remove flow triggers associated with the list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_list(list_id, opts = {})
      delete_list_with_http_info(list_id, opts)
      nil
    end

    # Delete List
    # Deletes a list from an account. This is a destructive operation and cannot be undone. It will also remove flow triggers associated with the list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.delete_list ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.delete_list"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.delete_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exclude Profile From All Email
    # Marks a person as excluded from all email. This works the same way as manually excluding someone via the excluded people page. Someone who is excluded will no longer receive any campaigns or flow emails.
    # @param email [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def exclude_globally(email, opts = {})
      data, _status_code, _headers = exclude_globally_with_http_info(email, opts)
      data
    end

    # Exclude Profile From All Email
    # Marks a person as excluded from all email. This works the same way as manually excluding someone via the excluded people page. Someone who is excluded will no longer receive any campaigns or flow emails.
    # @param email [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def exclude_globally_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.exclude_globally ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling ListsSegmentsApi.exclude_globally"
      end
      # resource path
      local_var_path = '/v1/people/exclusions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['email'] = email

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.exclude_globally",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#exclude_globally\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Global Exclusions & Unsubscribes
    # Returns global exclusions/unsubscribes. Global exclusions are distinct from list exclusions in that these email addresses will not receive any emails from any list. Typically, when someone unsubscribes from a campaign, they are only unsubscribed from that list and are not globally unsubscribed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason Filter results based on the reason for someone being excluded. The possible values are &#x60;unsubscribed&#x60;, &#x60;bounced&#x60;, &#x60;invalid_email&#x60;, &#x60;reported_spam&#x60; and &#x60;manually_excluded&#x60;. Only a single value may be specified at a time. Defaults to return all profiles regardless of reason.
    # @option opts [String] :sort Sort order to apply to results, either ascending or descending. Valid values are &#x60;asc&#x60; or &#x60;desc&#x60;. Defaults to &#x60;asc&#x60;. (default to 'asc')
    # @option opts [Integer] :count For pagination, the number of results to return. Default &#x3D; 500 (default to 500)
    # @option opts [Integer] :page For pagination, which page of results to return. Default &#x3D; 0 (default to 0)
    # @return [GlobalExclusionResponseData]
    def get_global_exclusions(opts = {})
      data, _status_code, _headers = get_global_exclusions_with_http_info(opts)
      data
    end

    # Get Global Exclusions &amp; Unsubscribes
    # Returns global exclusions/unsubscribes. Global exclusions are distinct from list exclusions in that these email addresses will not receive any emails from any list. Typically, when someone unsubscribes from a campaign, they are only unsubscribed from that list and are not globally unsubscribed.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason Filter results based on the reason for someone being excluded. The possible values are &#x60;unsubscribed&#x60;, &#x60;bounced&#x60;, &#x60;invalid_email&#x60;, &#x60;reported_spam&#x60; and &#x60;manually_excluded&#x60;. Only a single value may be specified at a time. Defaults to return all profiles regardless of reason.
    # @option opts [String] :sort Sort order to apply to results, either ascending or descending. Valid values are &#x60;asc&#x60; or &#x60;desc&#x60;. Defaults to &#x60;asc&#x60;.
    # @option opts [Integer] :count For pagination, the number of results to return. Default &#x3D; 500
    # @option opts [Integer] :page For pagination, which page of results to return. Default &#x3D; 0
    # @return [Array<(GlobalExclusionResponseData, Integer, Hash)>] GlobalExclusionResponseData data, response status code and response headers
    def get_global_exclusions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_global_exclusions ...'
      end
      # resource path
      local_var_path = '/v1/people/exclusions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reason'] = opts[:'reason'] if !opts[:'reason'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'GlobalExclusionResponseData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_global_exclusions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_global_exclusions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Exclusions for a List
    # Gets all of the emails and phone numbers that have been excluded from a list along with the exclusion reasons and exclusion time. This endpoint uses batching to return the records, so for a large list multiple calls will need to be made to get all of the records.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :marker A marker value returned by a previous GET call. Use this to grab the next batch of records.
    # @return [Hash<String, Object>]
    def get_list_exclusions(list_id, opts = {})
      data, _status_code, _headers = get_list_exclusions_with_http_info(list_id, opts)
      data
    end

    # Get All Exclusions for a List
    # Gets all of the emails and phone numbers that have been excluded from a list along with the exclusion reasons and exclusion time. This endpoint uses batching to return the records, so for a large list multiple calls will need to be made to get all of the records.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :marker A marker value returned by a previous GET call. Use this to grab the next batch of records.
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_list_exclusions_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_list_exclusions ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.get_list_exclusions"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/exclusions/all'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marker'] = opts[:'marker'] if !opts[:'marker'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_list_exclusions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_list_exclusions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Info
    # Returns information about a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_list_info(list_id, opts = {})
      data, _status_code, _headers = get_list_info_with_http_info(list_id, opts)
      data
    end

    # Get List Info
    # Returns information about a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_list_info_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_list_info ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.get_list_info"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_list_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_list_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if Profiles Are in a List
    # Checks if one or more emails, phone numbers, or push tokens are in a given list. No distinction is made between a person not being in a given list, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<Hash<String, Object>>]
    def get_list_members(list_id, opts = {})
      data, _status_code, _headers = get_list_members_with_http_info(list_id, opts)
      data
    end

    # Check if Profiles Are in a List
    # Checks if one or more emails, phone numbers, or push tokens are in a given list. No distinction is made between a person not being in a given list, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def get_list_members_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_list_members ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.get_list_members"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/get-members'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'check_membership_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hash<String, Object>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if Profiles Are in a List and not Suppressed
    # Checks if one or more emails are in a given list and not suppressed. No distinction is made between a person not being in a given list, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<Hash<String, Object>>]
    def get_list_subscriptions(list_id, opts = {})
      data, _status_code, _headers = get_list_subscriptions_with_http_info(list_id, opts)
      data
    end

    # Check if Profiles Are in a List and not Suppressed
    # Checks if one or more emails are in a given list and not suppressed. No distinction is made between a person not being in a given list, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def get_list_subscriptions_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_list_subscriptions ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.get_list_subscriptions"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/get-list-subscriptions'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'check_membership_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hash<String, Object>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_list_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_list_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Lists
    # Returns a listing of all of the lists in an account.
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def get_lists(opts = {})
      data, _status_code, _headers = get_lists_with_http_info(opts)
      data
    end

    # Get Lists
    # Returns a listing of all of the lists in an account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def get_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_lists ...'
      end
      # resource path
      local_var_path = '/v2/lists'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hash<String, Object>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_lists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List and Segment Members
    # Gets all of the emails, phone numbers, and push tokens for profiles in a given list or segment
    # @param list_or_segment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :marker A marker value returned by a previous GET call. Use this to grab the next batch of records.
    # @return [Hash<String, Object>]
    def get_members(list_or_segment_id, opts = {})
      data, _status_code, _headers = get_members_with_http_info(list_or_segment_id, opts)
      data
    end

    # Get List and Segment Members
    # Gets all of the emails, phone numbers, and push tokens for profiles in a given list or segment
    # @param list_or_segment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :marker A marker value returned by a previous GET call. Use this to grab the next batch of records.
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_members_with_http_info(list_or_segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_members ...'
      end
      # verify the required parameter 'list_or_segment_id' is set
      if @api_client.config.client_side_validation && list_or_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_or_segment_id' when calling ListsSegmentsApi.get_members"
      end
      # resource path
      local_var_path = '/v2/group/{list_or_segment_id}/members/all'.sub('{' + 'list_or_segment_id' + '}', CGI.escape(list_or_segment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marker'] = opts[:'marker'] if !opts[:'marker'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if Profiles Are in a Segment
    # Checks if one or more emails, phone numbers, or push tokens are in a given segment. No distinction is made between a person not being in a given segment, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param segment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<Hash<String, Object>>]
    def get_segment_members(segment_id, opts = {})
      data, _status_code, _headers = get_segment_members_with_http_info(segment_id, opts)
      data
    end

    # Check if Profiles Are in a Segment
    # Checks if one or more emails, phone numbers, or push tokens are in a given segment. No distinction is made between a person not being in a given segment, and not being present in Klaviyo at all. Can check up to a maximum of 100 emails at a time.
    # @param segment_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CheckMembershipRequest] :check_membership_request 
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def get_segment_members_with_http_info(segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.get_segment_members ...'
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling ListsSegmentsApi.get_segment_members"
      end
      # resource path
      local_var_path = '/v2/segment/{segment_id}/get-members'.sub('{' + 'segment_id' + '}', CGI.escape(segment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'check_membership_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hash<String, Object>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.get_segment_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#get_segment_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Profiles From List
    # Removes profiles from a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject5] :inline_object5 
    # @return [nil]
    def remove_members(list_id, opts = {})
      remove_members_with_http_info(list_id, opts)
      nil
    end

    # Remove Profiles From List
    # Removes profiles from a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject5] :inline_object5 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_members_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.remove_members ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.remove_members"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/members'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object5'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.remove_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#remove_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe Profiles to List
    # Subscribes profiles to a list. Profiles will be single or double opted into the specified list in accordance with that list’s settings. **Note:** If you have double opt-in enabled (default behavior), users will not be added to list until they opt-in, and so API will respond with an empty list: `[]`
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :inline_object3 
    # @return [Array<Object>]
    def subscribe(list_id, opts = {})
      data, _status_code, _headers = subscribe_with_http_info(list_id, opts)
      data
    end

    # Subscribe Profiles to List
    # Subscribes profiles to a list. Profiles will be single or double opted into the specified list in accordance with that list’s settings. **Note:** If you have double opt-in enabled (default behavior), users will not be added to list until they opt-in, and so API will respond with an empty list: &#x60;[]&#x60;
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :inline_object3 
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def subscribe_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.subscribe ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.subscribe"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/subscribe'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object3'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.subscribe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe Profiles From List
    # Unsubscribes and removes profiles from a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :request_body Unsubscribe and remove profiles from a list.
    # @return [nil]
    def unsubscribe(list_id, opts = {})
      unsubscribe_with_http_info(list_id, opts)
      nil
    end

    # Unsubscribe Profiles From List
    # Unsubscribes and removes profiles from a list.
    # @param list_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :request_body Unsubscribe and remove profiles from a list.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unsubscribe_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.unsubscribe ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.unsubscribe"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}/subscribe'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.unsubscribe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#unsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update List Name
    # Updates a list's name.
    # @param list_id [String] 
    # @param list_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_list_name(list_id, list_name, opts = {})
      update_list_name_with_http_info(list_id, list_name, opts)
      nil
    end

    # Update List Name
    # Updates a list&#39;s name.
    # @param list_id [String] 
    # @param list_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_list_name_with_http_info(list_id, list_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsSegmentsApi.update_list_name ...'
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsSegmentsApi.update_list_name"
      end
      # verify the required parameter 'list_name' is set
      if @api_client.config.client_side_validation && list_name.nil?
        fail ArgumentError, "Missing the required parameter 'list_name' when calling ListsSegmentsApi.update_list_name"
      end
      # resource path
      local_var_path = '/v2/list/{list_id}'.sub('{' + 'list_id' + '}', CGI.escape(list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['list_name'] = list_name

      # http body (model)
      post_body = opts[:body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ListsSegmentsApi.update_list_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsSegmentsApi#update_list_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
